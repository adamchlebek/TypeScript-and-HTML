{"version":3,"sources":["mydata.ts","chlebead.ts"],"names":[],"mappings":";AA+Ba,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,QAAA,eAAA,EA1BA,QAAA,UAAsB,CACjC,WACA,SACA,SACA,UACA,SACA,QACA,UACA,WACA,SACA,OACA,UACA,UACA,YACA,WACA,SACA,YACA,QACA,UACA,WACA,UACA,WACA,QACA,QAGW,QAAA,YAAsB,CACjC,CAAE,KAAM,WAAY,OAAQ,QAC5B,CAAE,KAAM,SAAU,OAAQ,QAC1B,CAAE,KAAM,SAAU,OAAQ,QAC1B,CAAE,KAAM,UAAW,OAAQ,KAC3B,CAAE,KAAM,SAAU,OAAQ,QAC1B,CAAE,KAAM,QAAS,OAAQ,QACzB,CAAE,KAAM,UAAW,OAAQ,QAC3B,CAAE,KAAM,WAAY,OAAQ,OAC5B,CAAE,KAAM,SAAU,OAAQ,QAC1B,CAAE,KAAM,OAAQ,OAAQ,QACxB,CAAE,KAAM,UAAW,OAAQ,QAC3B,CAAE,KAAM,UAAW,OAAQ,MAC3B,CAAE,KAAM,YAAa,OAAQ,QAC7B,CAAE,KAAM,WAAY,OAAQ,QAC5B,CAAE,KAAM,SAAU,OAAQ,QAC1B,CAAE,KAAM,YAAa,OAAQ,QAC7B,CAAE,KAAM,QAAS,OAAQ,KACzB,CAAE,KAAM,UAAW,OAAQ,QAC3B,CAAE,KAAM,WAAY,OAAQ,QAC5B,CAAE,KAAM,UAAW,OAAQ,QAC3B,CAAE,KAAM,WAAY,OAAQ,QAC5B,CAAE,KAAM,QAAS,OAAQ,QACzB,CAAE,KAAM,OAAQ,OAAQ;;ACO1B,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA7DA,IAAA,EAAA,QAAA,YAGM,EAAO,SAAS,eAAe,SAC/B,EAAO,SAAS,eAAe,SAC/B,EAAO,SAAS,eAAe,SAG/B,EAA0B,SAAS,cAAc,MACjD,EAA0B,SAAS,cAAc,MACjD,EAA2B,SAAS,cAAc,SAGxD,EAAA,UAAU,QAAQ,SAAA,GACV,IAAA,EAAO,SAAS,cAAc,MAClC,EAAK,YAAY,SAAS,eAAe,IACzC,EAAM,YAAY,KAGtB,MAAA,GAAA,EAAM,YAAY,GAGlB,EAAA,YAAY,QAAQ,SAAA,GACZ,IAAA,EAAO,SAAS,cAAc,MAC9B,EAAU,EAAK,KAAI,aAAa,EAAK,OAAM,IAC/C,EAAK,YAAY,SAAS,eAAe,IACzC,EAAK,UAAU,IAAI,EAAK,OAAS,IAAM,QAAU,SACjD,EAAM,YAAY,KAGtB,MAAA,GAAA,EAAM,YAAY,GAGlB,IAAM,EAAc,SAAS,cAAc,SAC3C,EAAO,YAAY,GAEnB,IAAmB,IAAA,EAAA,EAAA,EAAA,CAAC,OAAQ,UAAT,EAAA,EAAA,OAAA,IACnB,CADQ,IAAA,EAAO,EAAA,GAEL,EAAK,SAAS,cAAc,MAClC,EAAG,YAAY,SAAS,eAAe,IACvC,EAAY,YAAY,GAG5B,IAAM,EAAY,SAAS,cAAc,SACzC,EAAO,YAAY,GAEnB,IAAiB,IAAA,EAAA,EAAA,EAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAa,CAArB,IAAA,EAAI,EAAA,GACH,EAAW,SAAS,cAAc,MACxC,EAAU,YAAY,GAEhB,IAAA,EAAS,SAAS,cAAc,MACtC,EAAO,YAAY,SAAS,eAAe,EAAK,OAChD,EAAS,YAAY,GAEf,IAAA,EAAW,SAAS,cAAc,MACxC,EAAS,YAAY,SAAS,eAAe,EAAK,OAAO,aACzD,EAAS,YAAY,GAErB,EAAS,UAAU,IAAI,EAAK,OAAS,IAAM,QAAU,SAGzD,MAAA,GAAA,EAAM,YAAY","file":"chlebead.35213405.js","sourceRoot":"../src","sourcesContent":["export interface Atom {\n  name: string;\n  weight: number;\n}\n\nexport const atomNames: string[] = [\n  \"Aluminum\",\n  \"Barium\",\n  \"Carbon\",\n  \"Dubnium\",\n  \"Erbium\",\n  \"Fluor\",\n  \"Gallium\",\n  \"Hydrogen\",\n  \"Helium\",\n  \"Iron\",\n  \"Krypton\",\n  \"Lithium\",\n  \"Magnesium\",\n  \"Nitrogen\",\n  \"Oxygen\",\n  \"Palladium\",\n  \"Radon\",\n  \"Silicon\",\n  \"Titanium\",\n  \"Uranium\",\n  \"Vanadium\",\n  \"Xenon\",\n  \"Zinc\",\n];\n\nexport const atomObjects: Atom[] = [\n  { name: \"Aluminum\", weight: 26.982 },\n  { name: \"Barium\", weight: 137.33 },\n  { name: \"Carbon\", weight: 12.011 },\n  { name: \"Dubnium\", weight: 268 },\n  { name: \"Erbium\", weight: 167.26 },\n  { name: \"Fluor\", weight: 18.988 },\n  { name: \"Gallium\", weight: 69.723 },\n  { name: \"Hydrogen\", weight: 1.008 },\n  { name: \"Helium\", weight: 4.0026 },\n  { name: \"Iron\", weight: 55.845 },\n  { name: \"Krypton\", weight: 83.798 },\n  { name: \"Lithium\", weight: 6.94 },\n  { name: \"Magnesium\", weight: 24.305 },\n  { name: \"Nitrogen\", weight: 14.007 },\n  { name: \"Oxygen\", weight: 15.999 },\n  { name: \"Palladium\", weight: 106.42 },\n  { name: \"Radon\", weight: 222 },\n  { name: \"Silicon\", weight: 28.085 },\n  { name: \"Titanium\", weight: 47.867 },\n  { name: \"Uranium\", weight: 238.03 },\n  { name: \"Vanadium\", weight: 50.942 },\n  { name: \"Xenon\", weight: 131.29 },\n  { name: \"Zinc\", weight: 65.38 },\n];\n","import { atomNames, atomObjects, Atom } from \"./mydata\";\n\n// Find the placeholder node in the HTML document1\nconst div1 = document.getElementById(\"part1\");\nconst div2 = document.getElementById(\"part2\");\nconst div3 = document.getElementById(\"part3\");\n\n// Create an empty numbered list\nconst list1: HTMLOListElement = document.createElement(\"ol\");\nconst list2: HTMLOListElement = document.createElement(\"ol\");\nconst table3: HTMLTableElement = document.createElement(\"table\");\n\n// Part 1 \natomNames.forEach(atom => {\n    let node = document.createElement(\"li\");\n    node.appendChild(document.createTextNode(atom));\n    list1.appendChild(node);\n});\n\ndiv1?.appendChild(list1);\n\n// Part 2\natomObjects.forEach(atom => {\n    let node = document.createElement(\"li\");\n    let text = `${atom.name} (weight: ${atom.weight})`\n    node.appendChild(document.createTextNode(text));\n    node.classList.add(atom.weight > 150 ? 'heavy' : 'light');\n    list2.appendChild(node); \n});\n\ndiv2?.appendChild(list2);\n\n// Part 3\nconst tableHeader = document.createElement(\"thead\");\ntable3.appendChild(tableHeader);\n\nfor(let heading of ['Atom', 'Weight'])\n{\n    const th = document.createElement(\"th\");\n    th.appendChild(document.createTextNode(heading));\n    tableHeader.appendChild(th);\n}\n\nconst tableBody = document.createElement(\"tbody\");\ntable3.appendChild(tableBody);\n\nfor (let atom of atomObjects) {\n    const tableRow = document.createElement(\"tr\");\n    tableBody.appendChild(tableRow);\n\n    const tdName = document.createElement(\"td\");\n    tdName.appendChild(document.createTextNode(atom.name));\n    tableRow.appendChild(tdName);\n\n    const tdWeight = document.createElement(\"td\");\n    tdWeight.appendChild(document.createTextNode(atom.weight.toString()));\n    tableRow.appendChild(tdWeight);\n\n    tableRow.classList.add(atom.weight > 150 ? 'heavy' : 'light');\n}\n\ndiv3?.appendChild(table3);"]}